[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
authz = org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
# name of request parameter with username; if not present filter assumes 'username'
#authc.usernameParam = email_login
# name of request parameter with password; if not present filter assumes 'password'
#authc.passwordParam = password_login
#authc.failureKeyAttribute = shiroLoginFailure
authc.loginUrl = /login.jsf
#authc.successUrl = /index.jsf
roles.unauthorizedUrl = /denied.jsf


jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
#jdbcRealm.permissionsLookupEnabled=false
# If not filled, subclasses of JdbcRealm assume "select password from users where username = ?"
jdbcRealm.authenticationQuery = select PASSWORD from ACCOUNT where EMAIL = ?
# If not filled, subclasses of JdbcRealm assume "select role_name from user_roles where username = ?"
jdbcRealm.userRolesQuery = SELECT ROLE_NAME FROM ROLE INNER JOIN ACCOUNT_ROLE ON ACCOUNT_ROLE.ROLE_ID = ROLE.ROLE_ID INNER JOIN ACCOUNT ON ACCOUNT_ROLE.ACCOUNT_ID = ACCOUNT.ACCOUNT_ID WHERE EMAIL = ?

ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = password
ds.databaseName = store
jdbcRealm.dataSource = $ds

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher.passwordService = $passwordService

jdbcRealm.credentialsMatcher = $passwordMatcher

[users]

[roles]

[urls]
/login.xhtml = ssl[8443],authc
/denied.xhtml = ssl[8443],authz
/admin/** = ssl[8443],authc,roles[admin]
/manage/** = ssl[8443],authc,roles[manager]
/account/** = ssl[8443],authc,roles[customer]